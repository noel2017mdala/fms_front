{"ast":null,"code":"import Common from \"../../../classes/componentClass\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nexport const submit = () => {\n  return {\n    type: \"SUBMIT\"\n  };\n};\nexport const login = e => {\n  let url = \"http://127.0.0.1:8000/api/login\";\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  });\n  const request = new Request(url, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(e)\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData[\"state\"]) {\n        //stores token to cookies\n        cookies.set(\"auth_token\", resData[\"token\"], {\n          sameSite: \"strict\",\n          path: \"/\",\n          expires: new Date(new Date().getTime() + 200000 * 100) // httpOnly: true,\n          // secure: true,\n\n        }); //stores user information to cookies\n\n        cookies.set(\"user_info\", resData[\"user_info\"], {\n          sameSite: \"strict\",\n          path: \"/\",\n          expires: new Date(new Date().getTime() + 200000 * 1000) // httpOnly: true,\n          // secure: true,\n\n        });\n\n        if (cookies.get(\"auth_token\") && cookies.get(\"user_info\")) {\n          dispatch({\n            type: \"LOGIN_TOKEN\",\n            payLoad: resData\n          });\n        }\n      } else {\n        dispatch({\n          type: \"END_SUBMIT\",\n          payLoad: resData\n        });\n        Common.alertMsg(\"Username or password is incorrect\");\n      }\n    } catch (e) {\n      /*\n        notifies the user \n        and stops the loader \n        */\n      Common.alertMsg(\"Please check your internet connection and try again\");\n      dispatch({\n        type: \"END_SUBMIT\"\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/abel/fms_front/src/redux/actions/Login/LoginAction.js"],"names":["Common","Cookies","cookies","submit","type","login","e","url","headers","Headers","Accept","request","Request","method","body","JSON","stringify","dispatch","response","fetch","resData","json","set","sameSite","path","expires","Date","getTime","get","payLoad","alertMsg"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iCAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAEA,OAAO,MAAME,MAAM,GAAG,MAAM;AAC1B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,KAAK,GAAIC,CAAD,IAAO;AAC1B,MAAIC,GAAG,GAAG,iCAAV;AACA,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY;AAC1BC,IAAAA,MAAM,EAAE,kBADkB;AAE1B,oBAAgB;AAFU,GAAZ,CAAhB;AAIA,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAYL,GAAZ,EAAiB;AAC/BM,IAAAA,MAAM,EAAE,MADuB;AAE/BL,IAAAA,OAAO,EAAEA,OAFsB;AAG/BM,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,CAAf;AAHyB,GAAjB,CAAhB;AAMA,SAAO,MAAOW,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACR,OAAD,CAA5B;AACA,YAAMS,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;;AACA,UAAID,OAAO,CAAC,OAAD,CAAX,EAAsB;AACpB;AACAlB,QAAAA,OAAO,CAACoB,GAAR,CAAY,YAAZ,EAA0BF,OAAO,CAAC,OAAD,CAAjC,EAA4C;AAC1CG,UAAAA,QAAQ,EAAE,QADgC;AAE1CC,UAAAA,IAAI,EAAE,GAFoC;AAG1CC,UAAAA,OAAO,EAAE,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,SAAS,GAAzC,CAHiC,CAI1C;AACA;;AAL0C,SAA5C,EAFoB,CAUpB;;AACAzB,QAAAA,OAAO,CAACoB,GAAR,CAAY,WAAZ,EAAyBF,OAAO,CAAC,WAAD,CAAhC,EAA+C;AAC7CG,UAAAA,QAAQ,EAAE,QADmC;AAE7CC,UAAAA,IAAI,EAAE,GAFuC;AAG7CC,UAAAA,OAAO,EAAE,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,SAAS,IAAzC,CAHoC,CAI7C;AACA;;AAL6C,SAA/C;;AAQA,YAAIzB,OAAO,CAAC0B,GAAR,CAAY,YAAZ,KAA6B1B,OAAO,CAAC0B,GAAR,CAAY,WAAZ,CAAjC,EAA2D;AACzDX,UAAAA,QAAQ,CAAC;AAAEb,YAAAA,IAAI,EAAE,aAAR;AAAuByB,YAAAA,OAAO,EAAET;AAAhC,WAAD,CAAR;AACD;AACF,OAtBD,MAsBO;AACLH,QAAAA,QAAQ,CAAC;AAAEb,UAAAA,IAAI,EAAE,YAAR;AAAsByB,UAAAA,OAAO,EAAET;AAA/B,SAAD,CAAR;AACApB,QAAAA,MAAM,CAAC8B,QAAP,CAAgB,mCAAhB;AACD;AACF,KA7BD,CA6BE,OAAOxB,CAAP,EAAU;AACV;AACN;AACA;AACA;AACMN,MAAAA,MAAM,CAAC8B,QAAP,CAAgB,qDAAhB;AACAb,MAAAA,QAAQ,CAAC;AAAEb,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD;AACF,GAtCD;AAuCD,CAnDM","sourcesContent":["import Common from \"../../../classes/componentClass\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\nexport const submit = () => {\n  return {\n    type: \"SUBMIT\",\n  };\n};\n\nexport const login = (e) => {\n  let url = \"http://127.0.0.1:8000/api/login\";\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  });\n  const request = new Request(url, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(e),\n  });\n\n  return async (dispatch) => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n      if (resData[\"state\"]) {\n        //stores token to cookies\n        cookies.set(\"auth_token\", resData[\"token\"], {\n          sameSite: \"strict\",\n          path: \"/\",\n          expires: new Date(new Date().getTime() + 200000 * 100),\n          // httpOnly: true,\n          // secure: true,\n        });\n\n        //stores user information to cookies\n        cookies.set(\"user_info\", resData[\"user_info\"], {\n          sameSite: \"strict\",\n          path: \"/\",\n          expires: new Date(new Date().getTime() + 200000 * 1000),\n          // httpOnly: true,\n          // secure: true,\n        });\n\n        if (cookies.get(\"auth_token\") && cookies.get(\"user_info\")) {\n          dispatch({ type: \"LOGIN_TOKEN\", payLoad: resData });\n        }\n      } else {\n        dispatch({ type: \"END_SUBMIT\", payLoad: resData });\n        Common.alertMsg(\"Username or password is incorrect\");\n      }\n    } catch (e) {\n      /*\n        notifies the user \n        and stops the loader \n        */\n      Common.alertMsg(\"Please check your internet connection and try again\");\n      dispatch({ type: \"END_SUBMIT\" });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}