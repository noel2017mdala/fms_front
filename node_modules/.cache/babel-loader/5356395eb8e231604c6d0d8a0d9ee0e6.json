{"ast":null,"code":"import common from \"../../../classes/componentClass\";\nexport const activitiesAction = e => {\n  const {\n    id\n  } = e.id[0];\n  let url = `http://127.0.0.1:8000/api/transaction/limit/${id}`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.token}`\n  });\n  const request = new Request(url, {\n    method: \"GET\",\n    headers: headers\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData[\"state\"]) {\n        dispatch({\n          type: \"GET_ACTIVITIES\",\n          payLoad: resData\n        });\n      }\n    } catch (e) {\n      common.alertMsg(\"Please check you internet connection and try again later\"); // dispatch({ type: \"GET_ACTIVITIES\", payLoad: {} });\n    }\n  };\n};\nexport const getEarnings = e => {\n  const {\n    id\n  } = e.id[0];\n  let url = `http://127.0.0.1:8000/api/earnings/${id}`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.token}`\n  });\n  const request = new Request(url, {\n    method: \"GET\",\n    headers: headers\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData[\"state\"]) {\n        dispatch({\n          type: \"FETCH_EARNINGS\",\n          payLoad: resData\n        });\n      }\n    } catch (e) {\n      common.alertMsg(\"Please check you internet connection and try again later\"); // dispatch({ type: \"FETCH_EARNINGS\", payLoad: {} });\n    }\n  };\n};\nexport const getExpenses = e => {\n  const {\n    id\n  } = e.id[0];\n  let url = `http://127.0.0.1:8000/api/expences/${id}`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.token}`\n  });\n  const request = new Request(url, {\n    method: \"GET\",\n    headers: headers\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData[\"state\"]) {\n        dispatch({\n          type: \"FETCH_EXPENSES\",\n          payLoad: resData\n        });\n      }\n    } catch {\n      common.alertMsg(\"Please check you internet connection and try again later\"); // dispatch({ type: FETCH_EARNINGS, payLoad: {} });\n    }\n  };\n};\nexport const createTransaction = (e, token) => {\n  let url = \"http://127.0.0.1:8000/api/createtransaction\";\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`\n  });\n  const request = new Request(url, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(e)\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData[\"state\"]) {\n        common.alertMsg(\"transaction created successfully\", {\n          duration: 5000\n        });\n        return true; // dispatch({ type: \"CREATE_TRANSACTION\", payLoad: resData });\n      } else {\n        common.alertMsg(\"Failed to create Transaction\");\n      }\n    } catch {\n      common.alertMsg(\"transaction created successfully\", {\n        duration: 5000\n      }); // dispatch({ type: CREATE_TRANSACTION, payLoad: {} });\n    }\n  };\n};\nexport const allActivities = e => {\n  let url = `http://127.0.0.1:8000/api/transaction/all/${e.id}`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.token}`\n  });\n  const request = new Request(url, {\n    method: \"GET\",\n    headers: headers\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData[\"state\"]) {\n        dispatch({\n          type: \"FETCH_ALL_ACTIVITIES\",\n          payLoad: resData\n        });\n      }\n    } catch (e) {\n      common.alertMsg(\"transaction created successfully\", {\n        duration: 5000\n      });\n      dispatch({\n        type: \"FETCH_ALL_ACTIVITIES\",\n        payLoad: {}\n      });\n    }\n  };\n};\nexport const deleteActivity = e => {\n  let url = `http://127.0.0.1:8000/api/deletetransaction`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.userData.token}`\n  });\n  const request = new Request(url, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(e)\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData[\"state\"]) {\n        common.alertMsg(\"Activity deleted successfully\", 5000);\n        return true;\n      } else {\n        common.alertMsg(\"Failed to delete activity\", 5000);\n      }\n    } catch {\n      common.alertMsg(\"Please check you internet connection and try again later\", 5000); // dispatch({ type: DELETE_ACTIVITY, payLoad: {} });\n    }\n  };\n};","map":{"version":3,"sources":["/home/abel/fms_front/src/redux/actions/dashboard/activities.js"],"names":["common","activitiesAction","e","id","url","headers","Headers","Accept","Authorization","token","request","Request","method","dispatch","response","fetch","resData","json","type","payLoad","alertMsg","getEarnings","getExpenses","createTransaction","body","JSON","stringify","duration","allActivities","deleteActivity","userData"],"mappings":"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","sourcesContent":["import common from \"../../../classes/componentClass\";\nexport const activitiesAction = (e) => {\n  const { id } = e.id[0];\n  let url = `http://127.0.0.1:8000/api/transaction/limit/${id}`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.token}`,\n  });\n  const request = new Request(url, {\n    method: \"GET\",\n    headers: headers,\n  });\n  return async (dispatch) => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n      if (resData[\"state\"]) {\n        dispatch({ type: \"GET_ACTIVITIES\", payLoad: resData });\n      }\n    } catch (e) {\n      common.alertMsg(\n        \"Please check you internet connection and try again later\"\n      );\n      // dispatch({ type: \"GET_ACTIVITIES\", payLoad: {} });\n    }\n  };\n};\n\nexport const getEarnings = (e) => {\n  const { id } = e.id[0];\n  let url = `http://127.0.0.1:8000/api/earnings/${id}`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.token}`,\n  });\n  const request = new Request(url, {\n    method: \"GET\",\n    headers: headers,\n  });\n\n  return async (dispatch) => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n      if (resData[\"state\"]) {\n        dispatch({ type: \"FETCH_EARNINGS\", payLoad: resData });\n      }\n    } catch (e) {\n      common.alertMsg(\n        \"Please check you internet connection and try again later\"\n      );\n      // dispatch({ type: \"FETCH_EARNINGS\", payLoad: {} });\n    }\n  };\n};\n\nexport const getExpenses = (e) => {\n  const { id } = e.id[0];\n  let url = `http://127.0.0.1:8000/api/expences/${id}`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.token}`,\n  });\n  const request = new Request(url, {\n    method: \"GET\",\n    headers: headers,\n  });\n\n  return async (dispatch) => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n      if (resData[\"state\"]) {\n        dispatch({ type: \"FETCH_EXPENSES\", payLoad: resData });\n      }\n    } catch {\n      common.alertMsg(\n        \"Please check you internet connection and try again later\"\n      );\n      // dispatch({ type: FETCH_EARNINGS, payLoad: {} });\n    }\n  };\n};\n\nexport const createTransaction = (e, token) => {\n  let url = \"http://127.0.0.1:8000/api/createtransaction\";\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`,\n  });\n  const request = new Request(url, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(e),\n  });\n\n  return async (dispatch) => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n      if (resData[\"state\"]) {\n        common.alertMsg(\"transaction created successfully\", {\n          duration: 5000,\n        });\n        return true;\n        // dispatch({ type: \"CREATE_TRANSACTION\", payLoad: resData });\n      } else {\n        common.alertMsg(\"Failed to create Transaction\");\n      }\n    } catch {\n      common.alertMsg(\"transaction created successfully\", {\n        duration: 5000,\n      });\n      // dispatch({ type: CREATE_TRANSACTION, payLoad: {} });\n    }\n  };\n};\n\nexport const allActivities = (e) => {\n  let url = `http://127.0.0.1:8000/api/transaction/all/${e.id}`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.token}`,\n  });\n  const request = new Request(url, {\n    method: \"GET\",\n    headers: headers,\n  });\n  return async (dispatch) => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n      if (resData[\"state\"]) {\n        dispatch({ type: \"FETCH_ALL_ACTIVITIES\", payLoad: resData });\n      }\n    } catch (e) {\n      common.alertMsg(\"transaction created successfully\", {\n        duration: 5000,\n      });\n      dispatch({ type: \"FETCH_ALL_ACTIVITIES\", payLoad: {} });\n    }\n  };\n};\n\nexport const deleteActivity = (e) => {\n  let url = `http://127.0.0.1:8000/api/deletetransaction`;\n  const headers = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${e.userData.token}`,\n  });\n  const request = new Request(url, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(e),\n  });\n\n  return async (dispatch) => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n      if (resData[\"state\"]) {\n        common.alertMsg(\"Activity deleted successfully\", 5000);\n        return true;\n      } else {\n        common.alertMsg(\"Failed to delete activity\", 5000);\n      }\n    } catch {\n      common.alertMsg(\n        \"Please check you internet connection and try again later\",\n        5000\n      );\n      // dispatch({ type: DELETE_ACTIVITY, payLoad: {} });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}