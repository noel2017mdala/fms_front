{"ast":null,"code":"import toast from 'toasted-notes';\nimport 'toasted-notes/src/styles.css';\nexport const FETCH_LOGIN = 'FETCH_LOGIN';\nexport const FETCH_ACTIVITIES = 'FETCH_ACTIVITIES';\nexport const FETCH_EARNINGS = 'FETCH_EARNINGS';\nexport const login = e => {\n  let url = \"http://127.0.0.1:8000/api/login\";\n  const headers = new Headers({\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  });\n  const request = new Request(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(e)\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData['state']) {\n        dispatch({\n          type: FETCH_LOGIN,\n          payLoad: resData\n        });\n      } else {\n        toast.notify('Incorrect Email or Password', {\n          duration: 5000\n        });\n        dispatch({\n          type: FETCH_LOGIN,\n          payLoad: resData\n        });\n      }\n    } catch (e) {\n      toast.notify('Please check you internet connection and try again later', {\n        duration: 5000\n      });\n      dispatch({\n        type: FETCH_LOGIN,\n        payLoad: {}\n      });\n    }\n  };\n};\nexport const activitiesAction = e => {\n  let url = \"http://127.0.0.1:8000/api/transaction\";\n  const headers = new Headers({\n    'Accept': 'application/json',\n    'Content-Type': 'application/json' // 'Authorization': `Bearer ${e},`\n\n  });\n  const request = new Request(url, {\n    method: 'GET',\n    headers: headers\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData['state']) {\n        dispatch({\n          type: FETCH_ACTIVITIES,\n          payLoad: resData\n        });\n      }\n    } catch (e) {\n      toast.notify('Please check you internet connection and try again later', {\n        duration: 5000\n      });\n      dispatch({\n        type: FETCH_ACTIVITIES,\n        payLoad: {}\n      });\n    }\n  };\n};\nexport const getEarnings = e => {\n  let url = \"http://127.0.0.1:8000/api/earnings\";\n  const headers = new Headers({\n    'Accept': 'application/json',\n    'Content-Type': 'application/json' // 'Authorization': `Bearer ${e},`\n\n  });\n  const request = new Request(url, {\n    method: 'GET',\n    headers: headers\n  });\n  return async dispatch => {\n    try {\n      const response = await fetch(request);\n      const resData = await response.json();\n\n      if (resData['state']) {\n        dispatch({\n          type: FETCH_EARNINGS,\n          payLoad: resData\n        });\n      }\n    } catch (e) {\n      toast.notify('Please check you internet connection and try again later', {\n        duration: 5000\n      });\n      dispatch({\n        type: FETCH_EARNINGS,\n        payLoad: {}\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/abel/fms_front/src/redux/actions/actionCreator.js"],"names":["toast","FETCH_LOGIN","FETCH_ACTIVITIES","FETCH_EARNINGS","login","e","url","headers","Headers","request","Request","method","body","JSON","stringify","dispatch","response","fetch","resData","json","type","payLoad","notify","duration","activitiesAction","getEarnings"],"mappings":"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","sourcesContent":["import toast from 'toasted-notes'\nimport 'toasted-notes/src/styles.css';\nexport const FETCH_LOGIN = 'FETCH_LOGIN';\nexport const FETCH_ACTIVITIES = 'FETCH_ACTIVITIES';\nexport const FETCH_EARNINGS = 'FETCH_EARNINGS'; \n\nexport const login = (e) =>{\n    \n    let url = \"http://127.0.0.1:8000/api/login\";\n    const headers = new Headers({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    });\n    const request = new Request(url, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(e),\n    });\n   \n    return async dispatch =>{\n        try{\n\n        const response = await fetch(request);\n        const resData = await response.json();\n        if(resData['state']){    \n        dispatch({type: FETCH_LOGIN, payLoad: resData}); \n        }else{\n            toast.notify('Incorrect Email or Password',{\n                duration: 5000,\n            });\n            \n            dispatch({type: FETCH_LOGIN, payLoad: resData}); \n        }\n        }catch(e){\n            toast.notify('Please check you internet connection and try again later',{\n                duration: 5000,\n            });\n            dispatch({type: FETCH_LOGIN, payLoad: {}}); \n        }\n                \n    }    \n}\n\nexport  const activitiesAction = (e) =>{\n\n    let url = \"http://127.0.0.1:8000/api/transaction\";\n    const headers = new Headers({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        // 'Authorization': `Bearer ${e},`\n    });\n    const request = new Request(url, {\n        method: 'GET',\n        headers: headers,\n    });\n\n    return async dispatch =>{\n        try{\n\n        const response = await fetch(request);\n        const resData = await response.json();\n        if(resData['state']){    \n        dispatch({type: FETCH_ACTIVITIES, payLoad: resData}); \n        }\n        }catch(e){\n            toast.notify('Please check you internet connection and try again later',{\n                duration: 5000,\n            });\n            dispatch({type: FETCH_ACTIVITIES, payLoad: {}}); \n        }\n                \n    }\n\n}\n\nexport const getEarnings = (e) =>{\n\n    let url = \"http://127.0.0.1:8000/api/earnings\";\n    const headers = new Headers({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        // 'Authorization': `Bearer ${e},`\n    });\n    const request = new Request(url, {\n        method: 'GET',\n        headers: headers,\n    });\n\n    return async dispatch =>{\n        try{\n\n        const response = await fetch(request);\n        const resData = await response.json();\n        if(resData['state']){    \n        dispatch({type: FETCH_EARNINGS, payLoad: resData}); \n        }\n        }catch(e){\n            toast.notify('Please check you internet connection and try again later',{\n                duration: 5000,\n            });\n            dispatch({type: FETCH_EARNINGS, payLoad: {}}); \n        }\n                \n    }\n\n}"]},"metadata":{},"sourceType":"module"}